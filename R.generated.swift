//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `previous`.
    static let previous = Rswift.ImageResource(bundle: R.hostingBundle, name: "previous")
    
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "previous", bundle: ..., traitCollection: ...)`
    static func previous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.previous, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `EventListItemCell`.
    static let eventListItemCell = _R.nib._EventListItemCell()
    
    /// `UINib(name: "EventListItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventListItemCell) instead")
    static func eventListItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventListItemCell)
    }
    
    static func eventListItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventListItemCell? {
      return R.nib.eventListItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventListItemCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EventListItemCell`.
    static let eventListItemCell: Rswift.ReuseIdentifier<EventListItemCell> = Rswift.ReuseIdentifier(identifier: "EventListItemCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `CalendarViewController`.
    static let calendarViewController = _R.storyboard.calendarViewController()
    /// Storyboard `CreateEventViewController`.
    static let createEventViewController = _R.storyboard.createEventViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "CalendarViewController", bundle: ...)`
    static func calendarViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.calendarViewController)
    }
    
    /// `UIStoryboard(name: "CreateEventViewController", bundle: ...)`
    static func createEventViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createEventViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _EventListItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EventListItemCell
      
      let bundle = R.hostingBundle
      let identifier = "EventListItemCell"
      let name = "EventListItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventListItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventListItemCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try calendarViewController.validate()
      try createEventViewController.validate()
      try launchScreen.validate()
    }
    
    struct calendarViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CalendarViewController
      
      let bundle = R.hostingBundle
      let name = "CalendarViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "gearshape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gearshape' is used in storyboard 'CalendarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'CalendarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slider.horizontal.3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slider.horizontal.3' is used in storyboard 'CalendarViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct createEventViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CreateEventViewController
      
      let bundle = R.hostingBundle
      let createEventViewController = StoryboardViewControllerResource<CreateEventViewController>(identifier: "CreateEventViewController")
      let name = "CreateEventViewController"
      
      func createEventViewController(_: Void = ()) -> CreateEventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createEventViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark' is used in storyboard 'CreateEventViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xmark' is used in storyboard 'CreateEventViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.createEventViewController().createEventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createEventViewController' could not be loaded from storyboard 'CreateEventViewController' as 'CreateEventViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
